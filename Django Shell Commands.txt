# Django Shell Commands
---

from django.contrib.auth.models import User
from news.models import *

# Создать двух пользователей (с помощью метода User.objects.create_user('username')).
user1 = User.objects.create_user('user1')
user2 = User.objects.create_user('user2')

---
# Создать два объекта модели Author, связанные с пользователями.
author1 = Author.objects.create(username=user1)
author2 = Author.objects.create(username=user2)

---
# Добавить 4 категории в модель Category.
cat1 = Category.objects.create(name='Спорт')
cat2 = Category.objects.create(name='Политика')
cat3 = Category.objects.create(name='Культура')
cat4 = Category.objects.create(name='Наука')

---
# Добавить 2 статьи и 1 новость.
post1 = Post.objects.create(author=author1, post_type = Post.article, title = 'article1', text= 'Hello world')
post2 = Post.objects.create(author=author2, post_type = Post.article, title = 'article2', text= 'Hello SkillFactory')
post3 = Post.objects.create(author=author1, post_type = Post.news, title = 'News1', text= 'Sorry Mario, Princess is in Another Castle')

---
# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
post1.category.add(cat1)
post1.category.add(cat2)
post2.category.add(cat4)
post3.category.add(cat3)

---
# Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
comm1 = Comment.objects.create(post = post1, username=user1, text = 'I like it')
comm2 = Comment.objects.create(post = post1, username=user2, text = 'OK')
comm3 = Comment.objects.create(post = post2, username=user1, text = ':)')
comm4 = Comment.objects.create(post = post3, username=user1, text = '!@#$%')

---
# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
post1.like()
post1.dislike()
post1.like()
post2.like()
post2.like()
post2.like()
post3.dislike()
comm1.like()
comm2.like()
comm3.dislike()
comm4.like()

---
# Обновить рейтинги пользователей.
author1.update_rating()
author2.update_rating()

---
# Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
User.objects.order_by('-author__rating').values('username','author__rating').first()

---
# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
p = Post.objects.order_by('-rating').first()
p.date
p.author.username.username
p.rating
p.title
p.preview()

---
# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
p.comment_set.values('date','username__username','rating','text')
